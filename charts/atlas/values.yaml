# Default values for atlas.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000


nodeSelector: {}

tolerations: []

affinity: {}

##########################
### Start Custom Atlas ###
##########################

nameOverride: "atlas"
fullnameOverride: "atlas"
gracePeriodSeconds:
  enabled: true
  value: 60

## Namespace ##
namespace: development-infrastructure-research

## Secret ##
secrets:
  configs:
    enabled: false
    autorestart:
      enabled: false
    path: infrastructure-research/creds/atlas
  creds:
    enabled: false
    autorestart:
      enabled: false
    path: infrastructure-research/configs/atlas
  additional:
    enabled: false
    name: {}

## Volumes ##
## Add google creds SA here
## google Creds names for RC is samilar with green releases
volumes: {}
  # example volume from secrets
  # - name: service-account
  #   secret:
  #     secretName: atlas-sa
  # example volume from pvc
  # - name: data
  #   persistentVolumeClaim:
  #     claimName: volumes-pvc
volumeMounts: {}
  # example volume from secrets
  # - name: service-account
  #   mountPath: /mnt
  # example volume from pvc
  # - name: data
  #   mountPath: /data

## liveness type httpGet, exec, tcpSocket
## httpGet require path
## exec for gRPC
## tcpSocket not require path
liveness:
  port: 8000
  type: tcpSocket
  path: /ping

## Service ##

service:
  type: ClusterIP
  configs:
    - name: http
      port: 80
      targetPort: 8000
      protocol: TCP
    - name: grpc
      port: 80
      targetPort: 8000
      protocol: TCP
    - name: http
      port: 3000
      targetPort: 3000
      protocol: TCP

imagePullSecrets:
  - name: "gcr-json-key"

image:
  pullPolicy: "IfNotPresent"
  repository: "asia.gcr.io/privysign/infrastructure/research/atlas" # {"$imagepolicy": "flux-system:atlas:name"}
  tag: "1.0.4" # {"$imagepolicy": "flux-system:atlas:tag"}

## Use interceptor to build env and run the entrypoint command (Read Dockerfile)
interceptor:
  enabled: false
  args: "echo 'test-interceptor'" # "cd /opt/atlas ; envsubst < config/app.yaml.dist > config/app.yaml && ./atlas http"
migrations:
  enabled: false
  # type: pre-upgrade-job
  type: init-container
    # Init Container (From Orchestrator-Privypass)
    # - "cd /go/src/atlas && ./main db:migrate"
    # Pre-Uprade-Job (From Privylite-Be-V2)
    # - "cd /opt/atlas ; envsubst < config/app.yaml.dist > config/app.yaml ; ./atlas db:migrate up"
  args:
    - "cd /opt/atlas ; envsubst < config/app.yaml.dist > config/app.yaml; echo 'Initializing Service...'"
    # - "cd /opt/atlas ; ./atlas db:migrate up"

## HPA ##
## set enabled: false to disable HPA
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 2
  averageUtilMem: 80
  averageUtilCpu: 80

## Replica ##
replicaCount: 1

## check TRD to setup resource
resources: 
  limits:
    cpu: 400m
    memory: 256Mi
  requests:
    cpu: 300m
    memory: 192Mi

## Ingress ##
## enable disable ingress
## set true to ingress.external.enabled to enable external ingress
## you can modify ingress.rules freely

###########################################
## DO NOT add ingress to rc-release.yaml ##
###########################################

ingress:
  internal:
    enabled: false
    className: "internal-nginx"
  external:
    enabled: false
    className: "nginx"
  rules:
    - host: atlas.dcidev.id
      http:
        paths:
          - path: /rc(?:\/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: rc-atlas
                port:
                  number: 80
          - path: /(.*)
            pathType: Prefix
            backend:
              service:
                name: atlas
                port:
                  number: 80
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

## All Annotations ##
## Add annotation to selected resources
annotations:
  deployment: {}
  ingress: {}
  hpa: {}
  preupgradejob:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
  service: {}
  serviceaccount: {}
  vault:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"


## in case we need hostAliases ##
hostAliases: {}
  # - ip: "8.8.8.8"
  #   hostnames:
  #   - "google.com"
  #   - "www.google.com"
  # - ip: "1.1.1.1"
  #   hostnames:
  #   - "cloudflare.com"